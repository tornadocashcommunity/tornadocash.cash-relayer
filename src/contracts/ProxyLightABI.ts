/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ProxyLightAbiInterface extends utils.Interface {
  functions: {
    "backupNotes(bytes[])": FunctionFragment;
    "deposit(address,bytes32,bytes)": FunctionFragment;
    "withdraw(address,bytes,bytes32,bytes32,address,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "backupNotes" | "deposit" | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "backupNotes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "backupNotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EncryptedNote(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EncryptedNote"): EventFragment;
}

export interface EncryptedNoteEventObject {
  sender: string;
  encryptedNote: string;
}
export type EncryptedNoteEvent = TypedEvent<
  [string, string],
  EncryptedNoteEventObject
>;

export type EncryptedNoteEventFilter = TypedEventFilter<EncryptedNoteEvent>;

export interface ProxyLightAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyLightAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    backupNotes(
      _encryptedNotes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      _tornado: string,
      _commitment: BytesLike,
      _encryptedNote: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      _tornado: string,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  backupNotes(
    _encryptedNotes: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    _tornado: string,
    _commitment: BytesLike,
    _encryptedNote: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    _tornado: string,
    _proof: BytesLike,
    _root: BytesLike,
    _nullifierHash: BytesLike,
    _recipient: string,
    _relayer: string,
    _fee: BigNumberish,
    _refund: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    backupNotes(
      _encryptedNotes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _tornado: string,
      _commitment: BytesLike,
      _encryptedNote: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tornado: string,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EncryptedNote(address,bytes)"(
      sender?: string | null,
      encryptedNote?: null
    ): EncryptedNoteEventFilter;
    EncryptedNote(
      sender?: string | null,
      encryptedNote?: null
    ): EncryptedNoteEventFilter;
  };

  estimateGas: {
    backupNotes(
      _encryptedNotes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      _tornado: string,
      _commitment: BytesLike,
      _encryptedNote: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      _tornado: string,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    backupNotes(
      _encryptedNotes: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      _tornado: string,
      _commitment: BytesLike,
      _encryptedNote: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tornado: string,
      _proof: BytesLike,
      _root: BytesLike,
      _nullifierHash: BytesLike,
      _recipient: string,
      _relayer: string,
      _fee: BigNumberish,
      _refund: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

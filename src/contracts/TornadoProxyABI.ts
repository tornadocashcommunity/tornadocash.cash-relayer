/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TornadoProxyAbiInterface extends utils.Interface {
  functions: {
    "governance()": FunctionFragment;
    "instances(address)": FunctionFragment;
    "resolve(bytes32)": FunctionFragment;
    "tornadoTrees()": FunctionFragment;
    "deposit(address,bytes32)": FunctionFragment;
    "updateInstances(address,bool)": FunctionFragment;
    "withdraw(address,bytes,bytes32,bytes32,address,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "governance"
      | "instances"
      | "resolve"
      | "tornadoTrees"
      | "deposit"
      | "updateInstances"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "instances", values: [string]): string;
  encodeFunctionData(functionFragment: "resolve", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "tornadoTrees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstances",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tornadoTrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface TornadoProxyAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TornadoProxyAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    governance(overrides?: CallOverrides): Promise<[string]>;

    instances(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    tornadoTrees(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      tornado: string,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateInstances(
      instance: string,
      update: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      tornado: string,
      proof: BytesLike,
      root: BytesLike,
      nullifierHash: BytesLike,
      recipient: string,
      relayer: string,
      fee: BigNumberish,
      refund: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  governance(overrides?: CallOverrides): Promise<string>;

  instances(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  resolve(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  tornadoTrees(overrides?: CallOverrides): Promise<string>;

  deposit(
    tornado: string,
    commitment: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateInstances(
    instance: string,
    update: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    tornado: string,
    proof: BytesLike,
    root: BytesLike,
    nullifierHash: BytesLike,
    recipient: string,
    relayer: string,
    fee: BigNumberish,
    refund: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    governance(overrides?: CallOverrides): Promise<string>;

    instances(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    tornadoTrees(overrides?: CallOverrides): Promise<string>;

    deposit(
      tornado: string,
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInstances(
      instance: string,
      update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      tornado: string,
      proof: BytesLike,
      root: BytesLike,
      nullifierHash: BytesLike,
      recipient: string,
      relayer: string,
      fee: BigNumberish,
      refund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    governance(overrides?: CallOverrides): Promise<BigNumber>;

    instances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tornadoTrees(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      tornado: string,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    updateInstances(
      instance: string,
      update: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      tornado: string,
      proof: BytesLike,
      root: BytesLike,
      nullifierHash: BytesLike,
      recipient: string,
      relayer: string,
      fee: BigNumberish,
      refund: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    instances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tornadoTrees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      tornado: string,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateInstances(
      instance: string,
      update: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      tornado: string,
      proof: BytesLike,
      root: BytesLike,
      nullifierHash: BytesLike,
      recipient: string,
      relayer: string,
      fee: BigNumberish,
      refund: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
